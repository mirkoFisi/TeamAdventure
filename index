<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Corsi di Sopravvivenza</title>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: #e0e0e0;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(90deg, #2a4d3a 0%, #1e3326 100%);
            padding: 20px 0;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .header h1 {
            text-align: center;
            color: #ffffff;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 10px;
        }

        .header p {
            text-align: center;
            color: #b0d4c1;
            font-size: 1.1rem;
        }

        .controls {
            background: rgba(42, 77, 58, 0.2);
            padding: 20px;
            margin: 20px 0;
            border-radius: 12px;
            border: 1px solid rgba(42, 77, 58, 0.3);
        }

        .controls-row {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .control-group label {
            font-size: 0.9rem;
            color: #b0d4c1;
            font-weight: 500;
        }

        select, input {
            padding: 10px 12px;
            border: 1px solid #4a4a4a;
            background: #333;
            color: #e0e0e0;
            border-radius: 6px;
            font-size: 14px;
            min-width: 150px;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #2a4d3a;
            box-shadow: 0 0 0 2px rgba(42, 77, 58, 0.3);
        }

        .view-toggle {
            display: flex;
            gap: 10px;
            margin-left: auto;
        }

        .toggle-btn {
            padding: 10px 20px;
            background: #444;
            color: #e0e0e0;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toggle-btn.active {
            background: #2a4d3a;
            color: white;
        }

        .toggle-btn:hover {
            background: #555;
        }

        .toggle-btn.active:hover {
            background: #1e3326;
        }

        .content {
            margin: 20px 0;
        }

        .course-card {
            background: linear-gradient(135deg, #333 0%, #2a2a2a 100%);
            border: 1px solid #4a4a4a;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .course-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(to bottom, #2a4d3a, #1e3326);
        }

        .course-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            border-color: #2a4d3a;
        }

        .course-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .course-title {
            font-size: 1.4rem;
            color: #ffffff;
            font-weight: 600;
            text-transform: capitalize;
        }

        .course-date {
            background: rgba(42, 77, 58, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .instructors {
            margin: 15px 0;
        }

        .instructors-title {
            color: #b0d4c1;
            font-size: 0.9rem;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .instructor-list {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .instructor-tag {
            background: rgba(42, 77, 58, 0.3);
            color: #e0e0e0;
            padding: 6px 12px;
            border-radius: 15px;
            border: 1px solid rgba(42, 77, 58, 0.5);
            font-size: 0.85rem;
            text-transform: capitalize;
        }

        .course-notes {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #444;
            color: #b0b0b0;
            font-style: italic;
        }

        .calendar-view {
            display: none;
            background: #2a2a2a;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #4a4a4a;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .calendar-nav {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .nav-btn {
            background: #444;
            color: #e0e0e0;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .nav-btn:hover {
            background: #555;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: #444;
            border-radius: 8px;
            overflow: hidden;
        }

        .calendar-day {
            background: #333;
            min-height: 120px;
            padding: 8px;
            position: relative;
        }

        .calendar-day.other-month {
            background: #2a2a2a;
            opacity: 0.5;
        }

        .calendar-day.today {
            background: rgba(42, 77, 58, 0.2);
            border: 2px solid #2a4d3a;
        }

        .day-number {
            font-weight: bold;
            margin-bottom: 5px;
            color: #e0e0e0;
        }

        .calendar-event {
            background: rgba(42, 77, 58, 0.8);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            margin-bottom: 2px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .calendar-event:hover {
            background: rgba(42, 77, 58, 1);
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #888;
            font-size: 1.1rem;
        }

        .error {
            text-align: center;
            padding: 40px;
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid rgba(255, 107, 107, 0.3);
            border-radius: 8px;
            margin: 20px 0;
        }

        .no-courses {
            text-align: center;
            padding: 60px 20px;
            color: #888;
            font-size: 1.1rem;
        }

        .setup-instructions {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid rgba(255, 193, 7, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            color: #ffc107;
        }

        .setup-instructions h3 {
            margin-bottom: 10px;
            color: #ffffff;
        }

        .setup-instructions ol {
            margin-left: 20px;
        }

        .setup-instructions li {
            margin-bottom: 5px;
        }

        .url-info {
            background: rgba(42, 77, 58, 0.1);
            border: 1px solid rgba(42, 77, 58, 0.3);
            border-radius: 6px;
            padding: 10px;
            margin-top: 10px;
            font-size: 0.9rem;
            color: #b0d4c1;
        }

        @media (max-width: 768px) {
            .controls-row {
                flex-direction: column;
                align-items: stretch;
            }

            .view-toggle {
                margin-left: 0;
                justify-content: center;
            }

            .course-header {
                flex-direction: column;
                gap: 10px;
            }

            .calendar-grid {
                grid-template-columns: repeat(1, 1fr);
            }

            .calendar-day {
                min-height: 80px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>üèïÔ∏è Team Adventure</h1>
            <p>Pianificazione e gestione corsi per il gruppo</p>
        </div>
    </div>

    <div class="container">
        <div id="setupInstructions" class="setup-instructions">
            <h3>üìã Caricamento Dati</h3>
            <p>Incolla qui il link del tuo Google Sheet (qualsiasi formato):</p>
            <div style="margin-top: 15px;">
                <input type="text" id="sheetUrl" placeholder="https://docs.google.com/spreadsheets/d/..." style="width: 70%; margin-right: 10px;">
                <button onclick="loadSheet()" style="padding: 10px 20px; background: #2a4d3a; color: white; border: none; border-radius: 6px; cursor: pointer;">Carica Dati</button>
            </div>
            <div class="url-info">
                üí° <strong>Tip:</strong> L'app funziona con qualsiasi link Google Sheets, anche quelli di modifica (drivesdk). 
                Assicurati solo che il foglio sia condiviso come "Chiunque abbia il link pu√≤ visualizzare".
            </div>


<div style="margin-top: 20px; padding-top: 15px; border-top: 1px solid rgba(42, 77, 58, 0.3);">
    <p><strong>Oppure carica un file locale:</strong></p>
    <div style="margin-top: 10px;">
        <input type="file" id="fileInput" accept=".csv,.xlsx,.xls" style="margin-right: 10px;">
        <button onclick="loadLocalFile()" style="padding: 10px 20px; background: #2a4d3a; color: white; border: none; border-radius: 6px; cursor: pointer;">Carica File</button>
    </div>
    <div class="url-info" style="margin-top: 10px;">
        üìÅ <strong>Formati supportati:</strong> CSV (.csv), Excel (.xlsx, .xls)
    </div>
</div>


			
			
        </div>

        <div class="controls">
            <div class="controls-row">
                <div class="control-group">
                    <label for="filterInstructor">Filtra per istruttore:</label>
                    <select id="filterInstructor">
                        <option value="">Tutti gli istruttori</option>
                    </select>
                </div>
                
                <div class="control-group">
                    <label for="filterCourse">Filtra per corso:</label>
                    <select id="filterCourse">
                        <option value="">Tutti i corsi</option>
                    </select>
                </div>
                
                <div class="control-group">
                    <label for="filterMonth">Filtra per mese:</label>
                    <select id="filterMonth">
                        <option value="">Tutti i mesi</option>
                        <option value="0">Gennaio</option>
                        <option value="1">Febbraio</option>
                        <option value="2">Marzo</option>
                        <option value="3">Aprile</option>
                        <option value="4">Maggio</option>
                        <option value="5">Giugno</option>
                        <option value="6">Luglio</option>
                        <option value="7">Agosto</option>
                        <option value="8">Settembre</option>
                        <option value="9">Ottobre</option>
                        <option value="10">Novembre</option>
                        <option value="11">Dicembre</option>
                    </select>
                </div>

                <div class="view-toggle">
                    <button class="toggle-btn active" onclick="switchView('list')">üìã Lista</button>
                    <button class="toggle-btn" onclick="switchView('calendar')">üìÖ Calendario</button>
                </div>
            </div>
        </div>

        <div class="content">
            <div id="listView" class="list-view">
                <div class="loading">Carica i dati dal Google Sheet per iniziare...</div>
            </div>
            
            <div id="calendarView" class="calendar-view">
                <div class="calendar-header">
                    <button class="nav-btn" onclick="changeMonth(-1)">‚Äπ Precedente</button>
                    <h2 id="currentMonth"></h2>
                    <button class="nav-btn" onclick="changeMonth(1)">Successivo ‚Ä∫</button>
                </div>
                <div class="calendar-nav">
                    <span style="color: #888;">Lun</span>
                    <span style="color: #888;">Mar</span>
                    <span style="color: #888;">Mer</span>
                    <span style="color: #888;">Gio</span>
                    <span style="color: #888;">Ven</span>
                    <span style="color: #888;">Sab</span>
                    <span style="color: #888;">Dom</span>
                </div>
                <div id="calendarGrid" class="calendar-grid"></div>
            </div>
        </div>
    </div>

    <script>
        let allCourses = [];
        let currentView = 'list';
        let currentCalendarDate = new Date();

        // Funzione migliorata per normalizzare qualsiasi URL Google Sheets
        function normalizeGoogleSheetsUrl(url) {
            console.log('URL originale:', url);
            
            // Estrai l'ID del foglio da qualsiasi formato di URL
            const patterns = [
                /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,  // Pattern standard
                /\/document\/d\/([a-zA-Z0-9-_]+)/,      // Pattern alternativo
                /id=([a-zA-Z0-9-_]+)/,                  // Pattern con parametro id
            ];
            
            let fileId = null;
            for (const pattern of patterns) {
                const match = url.match(pattern);
                if (match) {
                    fileId = match[1];
                    break;
                }
            }
            
            if (!fileId) {
                throw new Error('Non riesco a estrarre l\'ID del foglio dall\'URL fornito');
            }
            
            console.log('ID estratto:', fileId);
            
            // Estrai il GID se presente (per fogli specifici)
            let gid = '0'; // Default al primo foglio
            const gidMatch = url.match(/[#&]gid=([0-9]+)/);
            if (gidMatch) {
                gid = gidMatch[1];
            }
            
            console.log('GID estratto:', gid);
            
            return {
                fileId: fileId,
                gid: gid,
                jsonUrl: `https://docs.google.com/spreadsheets/d/${fileId}/gviz/tq?tqx=out:json&gid=${gid}`,
                csvUrl: `https://docs.google.com/spreadsheets/d/${fileId}/export?format=csv&gid=${gid}`
            };
        }

        // Funzione per caricare i dati dal Google Sheet
        async function loadSheet() {
            const sheetUrl = document.getElementById('sheetUrl').value.trim();
            if (!sheetUrl) {
                alert('Inserisci il link del Google Sheet');
                return;
            }

            document.getElementById('listView').innerHTML = '<div class="loading">Caricamento dati...</div>';
            
            try {
                const urls = normalizeGoogleSheetsUrl(sheetUrl);
                console.log('URLs generati:', urls);
                
                // TENTATIVO 1: JSON format (pi√π affidabile)
                console.log('Tentativo 1 - JSON URL:', urls.jsonUrl);
                
                try {
                    const jsonResponse = await fetch(urls.jsonUrl, {
                        method: 'GET',
                        mode: 'cors',
                        cache: 'no-cache'
                    });
                    
                    if (jsonResponse.ok) {
                        const jsonText = await jsonResponse.text();
                        console.log('JSON ricevuto (primi 200 caratteri):', jsonText.substring(0, 200));
                        
                        // Il JSON di Google ha un prefisso da rimuovere
                        const cleanJson = jsonText.replace(/^.*?({.*}).*$/, '$1');
                        const data = JSON.parse(cleanJson);
                        
                        const courses = parseJsonData(data);
                        if (courses.length > 0) {
                            console.log('Successo con formato JSON!');
                            allCourses = courses;
                            document.getElementById('setupInstructions').style.display = 'none';
                            populateFilters();
                            renderCourses();
                            renderCalendar();
                            return;
                        } else {
                            console.log('JSON valido ma nessun corso trovato, provo CSV...');
                        }
                    }
                } catch (jsonError) {
                    console.log('Formato JSON fallito:', jsonError.message);
                }
                
                // TENTATIVO 2: CSV format (fallback)
                console.log('Tentativo 2 - CSV URL:', urls.csvUrl);
                
                const csvResponse = await fetch(urls.csvUrl, {
                    method: 'GET',
                    mode: 'cors',
                    cache: 'no-cache',
                    headers: {
                        'Accept': 'text/csv,text/plain,*/*'
                    }
                });
                
                console.log('CSV Response status:', csvResponse.status);
                
                if (!csvResponse.ok) {
                    throw new Error(`Errore HTTP: ${csvResponse.status} - ${csvResponse.statusText}`);
                }
                
                const csvText = await csvResponse.text();
                console.log('CSV ricevuto (primi 200 caratteri):', csvText.substring(0, 200));
                
                if (!csvText || csvText.trim().length === 0) {
                    throw new Error('Il foglio sembra essere vuoto');
                }
                
                const courses = parseCsvData(csvText);
                console.log('Corsi parsati:', courses);
                
                if (courses.length === 0) {
                    throw new Error('Nessun corso valido trovato nel foglio. Controlla il formato dei dati.');
                }
                
                allCourses = courses;
                document.getElementById('setupInstructions').style.display = 'none';
                populateFilters();
                renderCourses();
                renderCalendar();
                
                console.log('Caricamento CSV completato con successo!');
                
            } catch (error) {
                console.error('Errore nel caricamento:', error);
                document.getElementById('listView').innerHTML = 
                    `<div class="error">
                        <h3>‚ùå Errore nel caricamento</h3>
                        <p><strong>Dettaglio:</strong> ${error.message}</p>
                        <p><strong>Possibili soluzioni:</strong></p>
                        <ul style="text-align: left; margin: 10px 0;">
                            <li>üîì Verifica che il Google Sheet sia completamente pubblico ("Chiunque abbia il link pu√≤ visualizzare")</li>
                            <li>üåê Prova con un browser diverso o in modalit√† incognito</li>
                            <li>üîÑ Ricarica la pagina e riprova</li>
                            <li>üìã Assicurati che il foglio contenga le colonne: data inizio, data fine, corso, note, istruttori</li>
                            <li>üõ†Ô∏è Apri la console (F12) per dettagli tecnici</li>
                        </ul>
                    </div>`;
            }
        }

        // Funzione per parsare i dati JSON da Google Sheets
        function parseJsonData(data) {
            const courses = [];
            
            try {
                if (!data.table || !data.table.rows) {
                    console.error('Struttura JSON non valida:', data);
                    return courses;
                }
                
                console.log('Righe disponibili:', data.table.rows.length);
                
                for (let i = 0; i < data.table.rows.length; i++) {
                    const row = data.table.rows[i];
                    
                    if (!row.c || row.c.length < 3) {
                        console.log(`Riga ${i + 1} saltata: dati insufficienti`);
                        continue;
                    }
                    
                    // Estrai i valori dalle celle
                    const startDate = row.c[0] ? (row.c[0].v || row.c[0].f || '') : '';
                    const endDate = row.c[1] ? (row.c[1].v || row.c[1].f || '') : '';
                    const course = row.c[2] ? (row.c[2].v || row.c[2].f || '') : '';
                    const notes = row.c[3] ? (row.c[3].v || row.c[3].f || '') : '';
                    
                    // Estrai istruttori (colonne 4-7)
                    const instructors = [];
                    for (let j = 4; j < 8; j++) {
                        if (row.c[j] && row.c[j].v) {
                            const instructor = row.c[j].v.toString().trim();
                            if (instructor) {
                                instructors.push(instructor);
                            }
                        }
                    }
                    
                    // Salta le righe senza dati essenziali
                    if (!course || course.toString().trim() === '' || instructors.length === 0) {
                        console.log(`Riga ${i + 1} saltata: corso o istruttori mancanti`);
                        continue;
                    }
                    
                    // Determina la data da usare (priorit√†: data inizio, poi data fine)
                    let dateToUse = startDate || endDate;
                    
                    if (!dateToUse) {
                        console.log(`Riga ${i + 1} saltata: nessuna data disponibile`);
                        continue;
                    }
                    
                    // Converti la data
                    let parsedDate;
                    if (typeof dateToUse === 'number') {
                        // Google Sheets salva le date come numeri (giorni da 1/1/1900)
                        parsedDate = new Date((dateToUse - 25569) * 86400 * 1000);
                    } else if (typeof dateToUse === 'string') {
                        parsedDate = new Date(dateToUse);
                    } else {
                        console.log(`Riga ${i + 1} saltata: formato data non riconosciuto:`, dateToUse);
                        continue;
                    }
                    
                    if (isNaN(parsedDate.getTime())) {
                        console.log(`Riga ${i + 1} saltata: data non valida:`, dateToUse);
                        continue;
                    }
                    
                    courses.push({
                        startDate: parsedDate,
                        endDate: endDate ? (typeof endDate === 'number' ? new Date((endDate - 25569) * 86400 * 1000) : new Date(endDate)) : parsedDate,
                        course: course.toString().trim(),
                        notes: notes.toString().trim(),
                        instructors: instructors
                    });
                    
                    console.log(`Corso aggiunto: ${course}, istruttori: ${instructors.join(', ')}`);
                }
                
            } catch (error) {
                console.error('Errore nel parsing JSON:', error);
            }
            
            return courses;
        }

        // Funzione per parsare i dati CSV
        function parseCsvData(csvText) {
            const courses = [];
            const lines = csvText.split('\n');
            
            console.log('Linee CSV totali:', lines.length);
            
            // Salta la prima riga (intestazioni) e processa le righe dati
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i].trim();
                if (!line) continue;
                
                // Parsing CSV pi√π robusto che gestisce virgole all'interno delle virgolette
                const fields = parseCSVLine(line);
                
                console.log(`Riga ${i + 1} - Campi trovati:`, fields.length, fields);
                
                if (fields.length < 5) {
                    console.log(`Riga ${i + 1} saltata: campi insufficienti (${fields.length})`);
                    continue;
                }
                
                const startDate = fields[0] ? fields[0].trim() : '';
                const endDate = fields[1] ? fields[1].trim() : '';
                const course = fields[2] ? fields[2].trim() : '';
                const notes = fields[3] ? fields[3].trim() : '';
                
                // Estrai istruttori (colonne 4-7)
                const instructors = [];
                for (let j = 4; j < Math.min(8, fields.length); j++) {
                    if (fields[j] && fields[j].trim()) {
                        instructors.push(fields[j].trim());
                    }
                }
                
                // Salta le righe senza dati essenziali
                if (!course || instructors.length === 0) {
                    console.log(`Riga ${i + 1} saltata: corso o istruttori mancanti`);
                    continue;
                }
                
                // Determina la data da usare (priorit√†: data inizio, poi data fine)
                const dateToUse = startDate || endDate;
                
                if (!dateToUse) {
                    console.log(`Riga ${i + 1} saltata: nessuna data disponibile`);
                    continue;
                }
                
                // Converti la data
                const parsedStartDate = new Date(dateToUse);
                const parsedEndDate = endDate ? new Date(endDate) : parsedStartDate;
                
                if (isNaN(parsedStartDate.getTime())) {
                    console.log(`Riga ${i + 1} saltata: data non valida:`, dateToUse);
                    continue;
                }
                
                courses.push({
                    startDate: parsedStartDate,
                    endDate: parsedEndDate,
                    course: course,
                    notes: notes,
                    instructors: instructors
                });
                
                console.log(`Corso aggiunto: ${course}, istruttori: ${instructors.join(', ')}`);
            }
            
            return courses;
        }

        // Funzione helper per parsare una riga CSV gestendo le virgolette
        function parseCSVLine(line) {
            const fields = [];
            let current = '';
            let inQuotes = false;
            
            for (let i = 0; i < line.length; i++) {
                const char = line[i];
                
                if (char === '"') {
                    inQuotes = !inQuotes;
                } else if (char === ',' && !inQuotes) {
                    fields.push(current);
                    current = '';
                } else {
                    current += char;
                }
            }
            
            fields.push(current);
            return fields;
        }

///////////////////////////////////////////////////////

// Funzione per caricare file locali
async function loadLocalFile() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('Seleziona un file da caricare');
        return;
    }

    document.getElementById('listView').innerHTML = '<div class="loading">Caricamento file...</div>';
    
    try {
        let courses = [];
        
        if (file.name.toLowerCase().endsWith('.csv')) {
            courses = await loadCSVFile(file);
        } else if (file.name.toLowerCase().endsWith('.xlsx') || file.name.toLowerCase().endsWith('.xls')) {
            courses = await loadExcelFile(file);
        } else {
            throw new Error('Formato file non supportato. Usa CSV o Excel.');
        }
        
        if (courses.length === 0) {
            throw new Error('Nessun corso valido trovato nel file.');
        }
        
        allCourses = courses;
        document.getElementById('setupInstructions').style.display = 'none';
        populateFilters();
        renderCourses();
        renderCalendar();
        
        console.log('File caricato con successo!');
        
    } catch (error) {
        console.error('Errore nel caricamento del file:', error);
        document.getElementById('listView').innerHTML = 
            `<div class="error">
                <h3>‚ùå Errore nel caricamento del file</h3>
                <p><strong>Dettaglio:</strong> ${error.message}</p>
                <p><strong>Formato atteso:</strong> Le colonne dovrebbero essere: Data Inizio, Data Fine, Corso, Note, Istruttore1, Istruttore2, etc.</p>
            </div>`;
    }
}

// Funzione per caricare file CSV
function loadCSVFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const csvText = e.target.result;
                const courses = parseCsvData(csvText);
                resolve(courses);
            } catch (error) {
                reject(error);
            }
        };
        reader.onerror = function() {
            reject(new Error('Errore nella lettura del file CSV'));
        };
        reader.readAsText(file);
    });
}

// Funzione per caricare file Excel
function loadExcelFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {type: 'array'});
                
                // Prendi il primo foglio
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                
                // Converti in CSV
                const csvText = XLSX.utils.sheet_to_csv(worksheet);
                const courses = parseCsvData(csvText);
                resolve(courses);
            } catch (error) {
                reject(new Error('Errore nella lettura del file Excel: ' + error.message));
            }
        };
        reader.onerror = function() {
            reject(new Error('Errore nella lettura del file Excel'));
        };
        reader.readAsArrayBuffer(file);
    });
}


////////////////////////////////////////////////////



        // Funzione per popolare i filtri
        function populateFilters() {
            const instructorSelect = document.getElementById('filterInstructor');
            const courseSelect = document.getElementById('filterCourse');
            
            // Reset filtri
            instructorSelect.innerHTML = '<option value="">Tutti gli istruttori</option>';
            courseSelect.innerHTML = '<option value="">Tutti i corsi</option>';
            
            // Estrai tutti gli istruttori unici
            const allInstructors = new Set();
            const allCourseTypes = new Set();
            
            allCourses.forEach(course => {
                course.instructors.forEach(instructor => {
                    allInstructors.add(instructor);
                });
                allCourseTypes.add(course.course);
            });
            
            // Popola filtro istruttori
            Array.from(allInstructors).sort().forEach(instructor => {
                const option = document.createElement('option');
                option.value = instructor;
                option.textContent = instructor;
                instructorSelect.appendChild(option);
            });
            
            // Popola filtro corsi
            Array.from(allCourseTypes).sort().forEach(courseType => {
                const option = document.createElement('option');
                option.value = courseType;
                option.textContent = courseType;
                courseSelect.appendChild(option);
            });
        }

        // Funzione per filtrare e renderizzare i corsi
        function renderCourses() {
            const instructorFilter = document.getElementById('filterInstructor').value;
            const courseFilter = document.getElementById('filterCourse').value;
            const monthFilter = document.getElementById('filterMonth').value;
            
            let filteredCourses = allCourses.filter(course => {
                // Filtro istruttore
                if (instructorFilter && !course.instructors.some(instructor => 
                    instructor.toLowerCase().includes(instructorFilter.toLowerCase()))) {
                    return false;
                }
                
                // Filtro corso
                if (courseFilter && !course.course.toLowerCase().includes(courseFilter.toLowerCase())) {
                    return false;
                }
                
                // Filtro mese
                if (monthFilter !== '' && course.startDate.getMonth() !== parseInt(monthFilter)) {
                    return false;
                }
                
                return true;
            });
            
            // Ordina per data
            filteredCourses.sort((a, b) => a.startDate - b.startDate);
            
            const listView = document.getElementById('listView');
            
            if (filteredCourses.length === 0) {
                listView.innerHTML = '<div class="no-courses">Nessun corso trovato con i filtri selezionati.</div>';
                return;
            }
            
            const coursesHtml = filteredCourses.map(course => {
                const dateRange = course.startDate.getTime() === course.endDate.getTime() ? 
                    formatDate(course.startDate) : 
                    `${formatDate(course.startDate)} - ${formatDate(course.endDate)}`;
                
                const instructorsHtml = course.instructors.map(instructor => 
                    `<span class="instructor-tag">${instructor}</span>`
                ).join('');
                
                const notesHtml = course.notes ? 
                    `<div class="course-notes">üìù ${course.notes}</div>` : '';
                
                return `
                    <div class="course-card">
                        <div class="course-header">
                            <h3 class="course-title">${course.course}</h3>
                            <div class="course-date">${dateRange}</div>
                        </div>
                        <div class="instructors">
                            <div class="instructors-title">üë®‚Äçüè´ Istruttori:</div>
                            <div class="instructor-list">${instructorsHtml}</div>
                        </div>
                        ${notesHtml}
                    </div>
                `;
            }).join('');
            
            listView.innerHTML = coursesHtml;
        }

        // Funzione per formattare la data
        function formatDate(date) {
            return date.toLocaleDateString('it-IT', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        // Funzione per cambiare vista
        function switchView(view) {
            currentView = view;
            
            // Aggiorna bottoni
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[onclick="switchView('${view}')"]`).classList.add('active');
            
            // Mostra/nascondi viste
            if (view === 'list') {
                document.getElementById('listView').style.display = 'block';
                document.getElementById('calendarView').style.display = 'none';
            } else {
                document.getElementById('listView').style.display = 'none';
                document.getElementById('calendarView').style.display = 'block';
                renderCalendar();
            }
        }

        // Funzione per renderizzare il calendario
        function renderCalendar() {
            const monthNames = [
                'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
                'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
            ];
            
            const currentMonth = currentCalendarDate.getMonth();
            const currentYear = currentCalendarDate.getFullYear();
            
            document.getElementById('currentMonth').textContent = `${monthNames[currentMonth]} ${currentYear}`;
            
            // Calcola primo giorno del mese e numero di giorni
            const firstDay = new Date(currentYear, currentMonth, 1);
            const lastDay = new Date(currentYear, currentMonth + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = (firstDay.getDay() + 6) % 7; // Luned√¨ = 0
            
            const calendarGrid = document.getElementById('calendarGrid');
            calendarGrid.innerHTML = '';
            
            // Giorni del mese precedente
            const prevMonth = new Date(currentYear, currentMonth - 1, 0);
            for (let i = startingDayOfWeek - 1; i >= 0; i--) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day other-month';
                dayDiv.innerHTML = `<div class="day-number">${prevMonth.getDate() - i}</div>`;
                calendarGrid.appendChild(dayDiv);
            }
            
            // Giorni del mese corrente
            const today = new Date();
            for (let day = 1; day <= daysInMonth; day++) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day';
                
                const currentDate = new Date(currentYear, currentMonth, day);
                
                // Evidenzia oggi
                if (currentDate.toDateString() === today.toDateString()) {
                    dayDiv.classList.add('today');
                }
                
                dayDiv.innerHTML = `<div class="day-number">${day}</div>`;
                
                // Trova corsi per questo giorno
                const coursesForDay = allCourses.filter(course => {
                    const courseStart = new Date(course.startDate.getFullYear(), course.startDate.getMonth(), course.startDate.getDate());
                    const courseEnd = new Date(course.endDate.getFullYear(), course.endDate.getMonth(), course.endDate.getDate());
                    return currentDate >= courseStart && currentDate <= courseEnd;
                });
                
                // Aggiungi eventi
                coursesForDay.forEach(course => {
                    const eventDiv = document.createElement('div');
                    eventDiv.className = 'calendar-event';
                    eventDiv.textContent = course.course;
                    eventDiv.title = `${course.course} - ${course.instructors.join(', ')}`;
                    dayDiv.appendChild(eventDiv);
                });
                
                calendarGrid.appendChild(dayDiv);
            }
            
            // Giorni del mese successivo
            const totalCells = calendarGrid.children.length;
            const remainingCells = 42 - totalCells; // 6 righe x 7 giorni
            for (let day = 1; day <= remainingCells; day++) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day other-month';
                dayDiv.innerHTML = `<div class="day-number">${day}</div>`;
                calendarGrid.appendChild(dayDiv);
            }
        }

        // Funzione per cambiare mese nel calendario
        function changeMonth(direction) {
            currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            renderCalendar();
        }

        // Event listeners per i filtri
        document.getElementById('filterInstructor').addEventListener('change', renderCourses);
        document.getElementById('filterCourse').addEventListener('change', renderCourses);
        document.getElementById('filterMonth').addEventListener('change', renderCourses);

        // Event listener per Enter nell'input URL
        document.getElementById('sheetUrl').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                loadSheet();
            }
        });

        console.log('App inizializzata. Pronta per caricare i dati.');
    </script>
</body>
</html>
